import os
import requests
from sandboxapi import cuckoo
from keras.models import load_model
import sys
import time
import pprint
import tensorflow as tf
import json
import numpy as np
import pandas as pd

headers = {
    'Authorization': 'Bearer S4MPL3',
}
tf.logging.set_verbosity(tf.logging.FATAL)
sandbox = cuckoo.CuckooAPI('http://localhost:8090/')
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' 
model = load_model('Pickle/my_model.h5')


if not sandbox.is_available:
    print("Cuckoo Sandbox is Offline.")
    sys.exit(1)
filename = input('Enter the file name (including the path): ')

with open(filename, "rb") as handle:
    file_id = sandbox.analyze(handle, str(filename))
    print("File - {f} has been submitted for analysis. \nID - {i}".format(f=filename, i=file_id))
    
while not sandbox.check(file_id):
    print("Analysing the program")
    time.sleep(5)


print("\nAnalysis Complete. \nFetching report.")
time.sleep(3)
url = 'http://localhost:8090/tasks/report/' + str(file_id)
response = requests.get(url, headers=headers)
response = json.loads(response.text)
data = response
num = 1
eof = len(data["behavior"]["processes"][num]["calls"])

data_Frame = []

for i in range(0,eof):
    data_Frame.append(data["behavior"]["processes"][num]["calls"][i]["api"])
data_Frame = np.array(data_Frame)
data_Frame = data_Frame.reshape(1,eof)

data_Frame = pd.DataFrame(data_Frame)
data_Frame = data_Frame.iloc[:,:100]

import pickle
pickle_in = open("Pickle/d2.pickle","rb")
d2 = pickle.load(pickle_in)
data_Frame = data_Frame.stack().map(d2).unstack()
data_Frame = data_Frame.fillna(-1)

prediction = model.predict(data_Frame)
if(prediction[0][0]<0.3):
	print("\nFile is Safe")
else:
	print("\nFile seems to be Malicious")
print("File is " + str(round(100-prediction[0][0]*100,3)) + "% safe.")