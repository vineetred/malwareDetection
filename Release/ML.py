# file_id = 656
# url = 'http://localhost:8090/tasks/report/' + str(file_id)
# response = requests.get(url, headers=headers)
# response.encoding = 'utf-8'
import os
# import requests
# from sandboxapi import cuckoo
import keras
keras.learning_phase = 0
from keras.models import load_model
import sys
import time
# import pprint
import tensorflow as tf
import json
import numpy as np
import pandas as pd
import pickle
tf.logging.set_verbosity(tf.compat.v1.logging.FATAL)
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' 

model = load_model("C:/Users/ForensicsWorkstation/Desktop/Work/Work/malwareDetection-master/pdf.h5")
# json.loads(response.text)
data_Frame = pd.read_csv('C:/Users/ForensicsWorkstation/Desktop/Work/Work/malwareDetection-master/output.txt', header = None)
data_Frame = np.array(data_Frame)
eof = len(data_Frame)
data_Frame = data_Frame.reshape(1,eof)
# print(data.head())
# print(data)
data_Frame = pd.DataFrame(data_Frame)
data_Frame = data_Frame.iloc[:,:300]
pickle_in = open("d2_p2.pickle","rb")
d2 = pickle.load(pickle_in)
data_Frame = data_Frame.stack().map(d2).unstack()
if(data_Frame.shape[1]<300):
    for i in range(data_Frame.shape[1], 300):
        data_Frame[str(i)] = np.nan
    data_Frame = data_Frame.fillna(9999)
else:
    data_Frame = data_Frame.fillna(-1)
# print(data_Frame)
prediction = model.predict(data_Frame)
print(prediction)
# print(file_id)
if(prediction[0][0]<0.30):
	print("\nFile is Safe")
else:
	print("\nFile seems to be Malicious")
print("File is " + str(round(100-prediction[0][0]*100,3)) + "% safe.")

# return (100-prediction[0][0]*100)